{"version":3,"sources":["serviceWorker.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","randomNum","Math","floor","random","store","createStore","action","type","RandomQuote","props","colors","quotes","text","autor","handleClick","bind","this","submitNewQuote","id","style","backgroundColor","randomNumber","maxWidth","color","className","onClick","React","Component","WrappedMainComponent","connect","dispatch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a23f5d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {connect} from 'react-redux';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee } from '@fortawesome/free-solid-svg-icons'\r\nserviceWorker.register();\r\n\r\n\r\n\r\n\r\n\r\n//TYPE's\r\nconst quote = \"quote\";\r\n\r\n\r\n\r\n//ACTION CREATORS\r\nconst newQuote = () =>{\r\n\treturn {\r\n\t\ttype: quote\r\n\t}\r\n}\r\n\r\n\r\n\r\n//initialState's\r\nconst initialColors = [\r\n'#32a852','#98a832',\r\n'#a85532','#a8328b',\r\n'#3e32a8'\r\n];\r\n\r\n\r\n    const randomNum = Math.floor(Math.random() * Math.floor(10));\r\n\r\n\r\n//REDUCERS\r\nconst randomReducer = (state = randomNum, action) =>{\r\nswitch(action.type){\r\n\tcase quote:\r\n\t\tstate = Math.floor(Math.random() * Math.floor(10))\r\n\t\treturn state;\r\n\tdefault:\r\n\t\treturn state ;\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//STORE\r\nconst store = createStore(randomReducer);\r\n\r\nclass RandomQuote extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\t//COLORS\r\n\t\tcolors : [ '#32a852','#98a832','#a85532','#a8328b','#3e32a8','#c20606','#a69c98','#add609','#09d687','#b01c5a'],\r\n\t\t\t//QUOTES AND AURORS\r\n\t\tquotes: [\r\n\t\t{\r\n\t\ttext:'Without music, life would be a mistake.',\r\n\t\tautor:' Friedrich Nietzsche'\r\n\t\t},\r\n\t\t{\r\n\t\ttext:\"To go wrong in one's own way is better than to go right in someone else's.\",\r\n\t\tautor:' Fyodor Dostoevsky'\t\r\n\t\t},\r\n\t\t{\r\n\t\ttext:\"Be who you are and say what you feel, because those who mind don’t matter and those who matter don’t mind.\",\r\n\t\tautor:' Bernard M. Baruch'\t\r\n\t\t},\r\n\t\t{\r\n\t\ttext:\"Have the courage to follow your heart and intuition. They somehow already know what you truly want to become.\",\r\n\t\tautor:' Steve Jobs'\t\r\n\t\t},\r\n\t\t{\r\n\t\ttext:\"We must not allow other people’s limited perceptions to define us.\",\r\n\t\tautor:' Virginia Satir'\t\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext:\"Success is a lousy teacher. It seduces smart people into thinking they can’t lose.\",\r\n\t\t\tautor:' Bill Gates'\t\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext:\"Tact is the art of making a point without making an enemy.\",\r\n\t\t\tautor:' Isaac Newton'\t\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext:\"I don't care that they stole my idea . . I care that they don't have any of their own\",\r\n\t\t\tautor:' Nikola Tesla'\t\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext:\"Live as if you were to die tomorrow. Learn as if you were to live forever.\",\r\n\t\t\tautor:' Mahatma Gandhi'\t\r\n\t\t},\r\n\t\t{\r\n\t\t\ttext:\"There are no philosophical problems, there is only a suite of interconnected linguistic cul de sacs created by language's inability to reflect the truth.\",\r\n\t\t\tautor:' Victor Pelevin'\t\r\n\t\t}\r\n\t\t]\r\n\t};\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\thandleClick(){\r\n\t\tthis.props.submitNewQuote();\r\n\r\n\r\n\t}\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div id=\"quote-box-wrapper\" style={{backgroundColor:this.state.colors[this.props.randomNumber]}}>\r\n  \t\t\t<div id=\"quote-box\" style={{backgroundColor:'white', maxWidth: '50vw'}}>\r\n\t\t\t<h1 id=\"text\" style={{color:this.state.colors[this.props.randomNumber]}}>\"{this.state.quotes[this.props.randomNumber].text}</h1>\r\n\t\t\t<h3 id=\"author\" style={{color:this.state.colors[this.props.randomNumber]}}>-{this.state.quotes[this.props.randomNumber].autor}</h3>\r\n\t\t\t  <div id=\"button-wrapper\">\r\n\t\t\t\t<a style={{color:this.state.colors[this.props.randomNumber]}} href={`https://twitter.com/intent/tweet?text=${this.state.quotes[this.props.randomNumber].text + this.state.quotes[this.props.randomNumber].autor}`} id=\"tweet-quote\"><i className=\"fab fa-twitter fa-3x\"></i></a>\r\n\t\t\t\t<button  id='new-quote' onClick={this.handleClick} style={{backgroundColor:this.state.colors[this.props.randomNumber]}}>NEW QUOTE</button>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\n\r\n\r\n//MAP's\r\nconst mapStateToProps = (state) =>{\r\nreturn {\r\n\t\trandomNumber: state\r\n}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\nreturn {\r\n\t\tsubmitNewQuote: () => {\r\n\t\t\tdispatch(newQuote());\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n//connect\r\nconst WrappedMainComponent = connect(mapStateToProps,mapDispatchToProps)(RandomQuote);\r\n\r\n\r\n\r\n//RENDER\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t<WrappedMainComponent/>\r\n\t</Provider>, \r\n\tdocument.getElementById(\"root\"))\r\n"],"sourceRoot":""}